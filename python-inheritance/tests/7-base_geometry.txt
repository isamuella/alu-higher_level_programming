>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test area()
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Test integer_validator()
>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'


# Testing integer_validator correct input
>>> bg.integer_validator("distance", 12)


# Testing integer_validator with incorrect input
>>> try:
...     bg.integer_validator("distance", "25")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] distance must be an integer

>>> try:
...     bg.integer_validator("distance", [6])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TypeError] distance must be an integer

>>> try:
...     bg.integer_validator("distance", {1, 6})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TypeError] distance must be an integer

>>> try:
...     bg.integer_validator("distance", (3,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TypeError] distance must be an integer

>>> try:
...     bg.integer_validator("distance", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TypeError] distance must be an integer

>>> try:
...     bg.integer_validator("distance", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__,e))
[TrueError] distance must be an integer


# Testing integer_validator with zero input
>>> try:
...     bg.integer_validator("distance", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Testing integer_validator with negative number input
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0
